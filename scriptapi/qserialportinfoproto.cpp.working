/*
 * This file is part of the xTuple ERP: PostBooks Edition, a free and
 * open source Enterprise Resource Planning software suite,
 * Copyright (c) 1999-2016 by OpenMFG LLC, d/b/a xTuple.
 * It is licensed to you under the Common Public Attribution License
 * version 1.0, the full text of which(including xTuple-specific Exhibits)
 * is available at www.xtuple.com/CPAL.  By using this software, you agree
 * to be bound by its terms.
 */

#include "scriptapi_internal.h"
#include "qserialportinfoproto.h"
#define DEBUG true

#if QT_VERSION < 0x050100
void setupQSerialPortInfoProto(QScriptEngine *engine)
{
  Q_UNUSED(engine);
}
#else

static QScriptValue qserialportinfo_availablePorts(QScriptContext * /*context*/, QScriptEngine *engine)
{
  QStringList list;
  foreach (const QSerialPortInfo &info, QSerialPortInfo::availablePorts()) {
        QString s = info.portName();
        list << s;
  }

  QVariant v;
  v.setValue(list);
  return engine->newVariant(v);
}

void setupQSerialPortInfoProto(QScriptEngine *engine)
{
  if (DEBUG) qDebug("setupQSerialPortInfoProto entered");

  QScriptValue serialinfoproto = engine->newQObject(new QSerialPortInfoProto(engine));
  engine->setDefaultPrototype(qMetaTypeId<QSerialPortInfo>(), serialinfoproto);
  engine->setDefaultPrototype(qMetaTypeId<QSerialPortInfo*>(), serialinfoproto);

  QScriptValue serialPortInfoConstructor = engine->newFunction(constructQSerialPortInfo, serialinfoproto);
  engine->globalObject().setProperty("QSerialPortInfo", serialPortInfoConstructor);
  
  serialPortInfoConstructor.setProperty("availablePorts", engine->newFunction(qserialportinfo_availablePorts), STATICPROPFLAGS);
}

QScriptValue constructQSerialPortInfo(QScriptContext *context, QScriptEngine *engine)
{
    if (DEBUG) qDebug("constructQSerialPortInfo called");
    
    QSerialPortInfo *object = 0;

    if (context->argumentCount() == 0)
    {
        if (DEBUG) qDebug("qserialportinfo(2 args, string/qobject)");
        object = new QSerialPortInfo();
    }
    else if (context->argumentCount() == 1 && context->argument(0).isString())
    {
      if (DEBUG) qDebug("qserialportinfo(1 arg, string)");
      object = new QSerialPortInfo(context->argument(0).toString());
    }
    else
    {
      if (DEBUG) qDebug("qserialportinfo unknown");
      context->throwError(QScriptContext::UnknownError, "Unknown Constructor");
    }

    return engine->toScriptValue(object);
}

QSerialPortInfoProto::QSerialPortInfoProto(QObject *parent) 
    : QObject(parent)
{
}
#endif
